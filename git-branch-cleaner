#!/bin/bash

set -euo pipefail

# Default configuration
DEFAULT_STALE_DAYS=30
DEFAULT_CONFIG_FILE="$HOME/.git-branch-cleaner.conf"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration variables
STALE_DAYS=$DEFAULT_STALE_DAYS
CHECK_PRS=false
GITHUB_TOKEN=""
DRY_RUN=false
SCAN_REMOTE=false
REPOS=()
EXCLUDE_BRANCHES="main|master|develop|dev"

show_help() {
    cat << EOF
Git Branch Cleaner - Find and delete stale branches

USAGE:
    git-branch-cleaner [OPTIONS] [REPO_PATHS...]

OPTIONS:
    -d, --days DAYS         Number of days to consider a branch stale (default: $DEFAULT_STALE_DAYS)
    -p, --check-prs         Check for active pull requests (requires GitHub token)
    -r, --remote            Also scan remote branches on GitHub server
    -t, --token TOKEN       GitHub token for PR checking and remote scanning
    -n, --dry-run          Show what would be deleted without actually deleting
    -e, --exclude PATTERN   Regex pattern for branches to exclude (default: $EXCLUDE_BRANCHES)
    -c, --config FILE       Use config file (default: $DEFAULT_CONFIG_FILE)
    -h, --help             Show this help message

EXAMPLES:
    # Scan current repo for branches older than 30 days
    git-branch-cleaner

    # Scan multiple repos with custom staleness period
    git-branch-cleaner -d 14 /path/to/repo1 /path/to/repo2

    # Check for active PRs before suggesting deletion
    git-branch-cleaner -p -t ghp_your_token_here

    # Scan both local and remote branches
    git-branch-cleaner -r -t ghp_your_token_here

    # Dry run to see what would be deleted
    git-branch-cleaner -n

EOF
}

log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

load_config() {
    if [[ -f "$1" ]]; then
        log "Loading config from $1"
        # shellcheck source=/dev/null
        source "$1"
    fi
}

is_git_repo() {
    local repo_path="$1"
    [[ -d "$repo_path/.git" ]] || git -C "$repo_path" rev-parse --git-dir >/dev/null 2>&1
}

get_stale_branches() {
    local repo_path="$1"
    local cutoff_date
    
    cutoff_date=$(date -d "$STALE_DAYS days ago" +%Y-%m-%d 2>/dev/null || date -v-${STALE_DAYS}d +%Y-%m-%d 2>/dev/null)
    
    if [[ -z "$cutoff_date" ]]; then
        error "Failed to calculate cutoff date"
        return 1
    fi
    
    # Log to stderr to avoid contaminating the output pipeline
    log "Finding branches older than $cutoff_date in $repo_path" >&2
    
    # Get all local branches with their last commit dates, excluding protected branches
    git -C "$repo_path" for-each-ref --format='%(refname:short)|%(committerdate:short)|%(authorname)' refs/heads/ | \
    while IFS='|' read -r branch date author; do
        # Skip excluded branches
        if [[ "$branch" =~ ^($EXCLUDE_BRANCHES)$ ]]; then
            continue
        fi
        
        # Check if branch is stale
        if [[ "$date" < "$cutoff_date" ]]; then
            echo "$branch|$date|$author"
        fi
    done
}

get_repo_info() {
    local repo_path="$1"
    local remote_url
    remote_url=$(git -C "$repo_path" remote get-url origin 2>/dev/null || echo "")
    
    if [[ -z "$remote_url" ]]; then
        return 1
    fi
    
    # Parse GitHub repo from URL
    if [[ "$remote_url" =~ github.com[:/]([^/]+)/([^/.]+) ]]; then
        echo "${BASH_REMATCH[1]}/${BASH_REMATCH[2]}"
        return 0
    fi
    
    return 1
}

check_pr_status() {
    local repo_path="$1"
    local branch="$2"
    
    if [[ "$CHECK_PRS" == false ]] || [[ -z "$GITHUB_TOKEN" ]]; then
        return 1  # No PR check or no token
    fi
    
    local repo_info
    repo_info=$(get_repo_info "$repo_path")
    
    if [[ -z "$repo_info" ]]; then
        return 1
    fi
    
    # Check for open PRs for this branch
    local pr_count
    pr_count=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/$repo_info/pulls?head=$repo_info:$branch&state=open" | \
        jq length 2>/dev/null || echo "0")
    
    [[ "$pr_count" -gt 0 ]]
}

get_remote_stale_branches() {
    local repo_path="$1"
    
    if [[ "$SCAN_REMOTE" == false ]] || [[ -z "$GITHUB_TOKEN" ]]; then
        return 0
    fi
    
    local repo_info
    repo_info=$(get_repo_info "$repo_path")
    
    if [[ -z "$repo_info" ]]; then
        warn "Cannot scan remote branches: not a GitHub repository" >&2
        return 0
    fi
    
    log "Scanning remote branches on GitHub for $repo_info" >&2
    
    local cutoff_date cutoff_timestamp
    cutoff_date=$(date -d "$STALE_DAYS days ago" +%Y-%m-%d 2>/dev/null || date -v-${STALE_DAYS}d +%Y-%m-%d 2>/dev/null)
    cutoff_timestamp=$(date -d "$STALE_DAYS days ago" +%s 2>/dev/null || date -v-${STALE_DAYS}d +%s 2>/dev/null)
    
    if [[ -z "$cutoff_date" ]] || [[ -z "$cutoff_timestamp" ]]; then
        error "Failed to calculate cutoff date for remote scan" >&2
        return 1
    fi
    
    log "Remote scan cutoff date: $cutoff_date" >&2
    
    # Get all branches from GitHub API with pagination support
    local page=1
    local temp_file
    temp_file=$(mktemp)
    
    while true; do
        local api_response
        api_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$repo_info/branches?per_page=100&page=$page")
        
        # Check if API call failed
        if [[ -z "$api_response" ]] || echo "$api_response" | jq -e '.message' >/dev/null 2>&1; then
            if [[ "$page" -eq 1 ]]; then
                error "Failed to fetch branches from GitHub API" >&2
                if echo "$api_response" | jq -e '.message' >/dev/null 2>&1; then
                    error "API Error: $(echo "$api_response" | jq -r '.message')" >&2
                fi
            fi
            break
        fi
        
        # Parse branch data and write to temp file
        echo "$api_response" | jq -r '.[] | "\(.name)|\(.commit.commit.committer.date)|\(.commit.commit.committer.name)"' 2>/dev/null >> "$temp_file"
        
        # Check if we got less than 100 results (last page)
        local branch_count
        branch_count=$(echo "$api_response" | jq length 2>/dev/null || echo "0")
        if [[ "$branch_count" -lt 100 ]]; then
            break
        fi
        
        ((page++))
    done
    
    # Process the branches from temp file
    while IFS='|' read -r branch date author; do
        [[ -z "$branch" ]] && continue
        
        # Skip excluded branches
        if [[ "$branch" =~ ^($EXCLUDE_BRANCHES)$ ]]; then
            continue
        fi
        
        # Convert ISO date to timestamp for comparison
        local branch_timestamp
        branch_timestamp=$(date -d "$date" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$date" +%s 2>/dev/null)
        
        if [[ -n "$branch_timestamp" ]] && [[ "$branch_timestamp" -lt "$cutoff_timestamp" ]]; then
            # Check if this branch exists locally
            if ! git -C "$repo_path" show-ref --verify --quiet "refs/heads/$branch" 2>/dev/null; then
                local branch_date
                branch_date=$(date -d "$date" +%Y-%m-%d 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$date" +%Y-%m-%d 2>/dev/null)
                echo "remote:$branch|$branch_date|$author"
            fi
        fi
    done < "$temp_file"
    
    # Cleanup
    rm -f "$temp_file"
}

select_branches_to_delete() {
    local repo_path="$1"
    local stale_branches=("${@:2}")
    local selected_branches=()
    local selected_remote_branches=()
    
    if [[ ${#stale_branches[@]} -eq 0 ]]; then
        log "No stale branches found in $repo_path"
        return 0
    fi
    
    echo
    echo -e "${YELLOW}Stale branches found in $repo_path:${NC}"
    echo "----------------------------------------"
    
    local i=1
    local branch_info=()
    local remote_branch_info=()
    
    for branch_data in "${stale_branches[@]}"; do
        IFS='|' read -r branch date author <<< "$branch_data"
        
        # Handle remote branches
        if [[ "$branch" =~ ^remote:(.+)$ ]]; then
            local actual_branch="${BASH_REMATCH[1]}"
            local pr_status=""
            if check_pr_status "$repo_path" "$actual_branch"; then
                pr_status=" ${GREEN}(has open PR)${NC}"
                continue  # Skip branches with open PRs
            fi
            
            echo -e "$i) ${BLUE}[REMOTE]${NC} $actual_branch (last commit: $date by $author)$pr_status"
            remote_branch_info+=("$actual_branch")
            ((i++))
        else
            # Handle local branches
            local pr_status=""
            if check_pr_status "$repo_path" "$branch"; then
                pr_status=" ${GREEN}(has open PR)${NC}"
                continue  # Skip branches with open PRs
            fi
            
            echo -e "$i) $branch (last commit: $date by $author)$pr_status"
            branch_info+=("$branch")
            ((i++))
        fi
    done
    
    if [[ ${#branch_info[@]} -eq 0 ]] && [[ ${#remote_branch_info[@]} -eq 0 ]]; then
        log "All stale branches have open PRs, nothing to delete"
        return 0
    fi
    
    echo
    echo "Enter branch numbers to delete (e.g., 1,3,5 or 1-3 or 'all' or 'none'):"
    read -r selection
    
    # Combine local and remote branch info for selection
    local all_branch_info=("${branch_info[@]}" "${remote_branch_info[@]}")
    local all_branch_types=()
    
    # Track which branches are local vs remote
    for ((j=0; j<${#branch_info[@]}; j++)); do
        all_branch_types+=("local")
    done
    for ((j=0; j<${#remote_branch_info[@]}; j++)); do
        all_branch_types+=("remote")
    done
    
    case "$selection" in
        "none"|"")
            log "No branches selected for deletion"
            return 0
            ;;
        "all")
            selected_branches=("${branch_info[@]}")
            selected_remote_branches=("${remote_branch_info[@]}")
            ;;
        *"-"*)
            # Range selection (e.g., 1-3)
            local start end
            IFS='-' read -r start end <<< "$selection"
            for ((j=start; j<=end && j<=${#all_branch_info[@]}; j++)); do
                local idx=$((j-1))
                if [[ "${all_branch_types[$idx]}" == "local" ]]; then
                    selected_branches+=("${all_branch_info[$idx]}")
                else
                    selected_remote_branches+=("${all_branch_info[$idx]}")
                fi
            done
            ;;
        *","*)
            # Comma-separated selection
            IFS=',' read -ra indices <<< "$selection"
            for index in "${indices[@]}"; do
                if [[ "$index" =~ ^[0-9]+$ ]] && [[ "$index" -ge 1 ]] && [[ "$index" -le ${#all_branch_info[@]} ]]; then
                    local idx=$((index-1))
                    if [[ "${all_branch_types[$idx]}" == "local" ]]; then
                        selected_branches+=("${all_branch_info[$idx]}")
                    else
                        selected_remote_branches+=("${all_branch_info[$idx]}")
                    fi
                fi
            done
            ;;
        *)
            # Single number
            if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#all_branch_info[@]} ]]; then
                local idx=$((selection-1))
                if [[ "${all_branch_types[$idx]}" == "local" ]]; then
                    selected_branches+=("${all_branch_info[$idx]}")
                else
                    selected_remote_branches+=("${all_branch_info[$idx]}")
                fi
            fi
            ;;
    esac
    
    if [[ ${#selected_branches[@]} -eq 0 ]] && [[ ${#selected_remote_branches[@]} -eq 0 ]]; then
        log "No valid branches selected"
        return 0
    fi
    
    echo
    echo -e "${RED}Selected branches for deletion:${NC}"
    if [[ ${#selected_branches[@]} -gt 0 ]]; then
        echo "Local branches:"
        printf '  %s\n' "${selected_branches[@]}"
    fi
    if [[ ${#selected_remote_branches[@]} -gt 0 ]]; then
        echo "Remote branches:"
        printf '  %s\n' "${selected_remote_branches[@]}"
    fi
    
    if [[ "$DRY_RUN" == true ]]; then
        warn "DRY RUN: Would delete $((${#selected_branches[@]} + ${#selected_remote_branches[@]})) branches"
        return 0
    fi
    
    echo
    echo -e "${RED}WARNING: This will permanently delete the selected branches!${NC}"
    echo "Are you sure? (yes/no)"
    read -r confirmation
    
    if [[ "$confirmation" == "yes" ]]; then
        if [[ ${#selected_branches[@]} -gt 0 ]]; then
            delete_branches "$repo_path" "${selected_branches[@]}"
        fi
        if [[ ${#selected_remote_branches[@]} -gt 0 ]]; then
            delete_remote_branches "$repo_path" "${selected_remote_branches[@]}"
        fi
    else
        log "Deletion cancelled"
    fi
}

delete_branches() {
    local repo_path="$1"
    local branches=("${@:2}")
    local deleted_count=0
    
    for branch in "${branches[@]}"; do
        if git -C "$repo_path" branch -D "$branch" >/dev/null 2>&1; then
            success "Deleted local branch: $branch"
            ((deleted_count++))
        else
            error "Failed to delete local branch: $branch"
        fi
    done
    
    success "Deleted $deleted_count out of ${#branches[@]} local branches in $repo_path"
}

delete_remote_branches() {
    local repo_path="$1"
    local branches=("${@:2}")
    local deleted_count=0
    
    if [[ -z "$GITHUB_TOKEN" ]]; then
        error "GitHub token required for remote branch deletion"
        return 1
    fi
    
    local repo_info
    repo_info=$(get_repo_info "$repo_path")
    
    if [[ -z "$repo_info" ]]; then
        error "Cannot delete remote branches: not a GitHub repository"
        return 1
    fi
    
    for branch in "${branches[@]}"; do
        if curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$repo_info/git/refs/heads/$branch" | \
            jq -e '.message' >/dev/null 2>&1; then
            
            # Check if deletion was successful (GitHub API returns error message if failed)
            local response
            response=$(curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$repo_info/git/refs/heads/$branch")
            
            if [[ "$response" =~ "Not Found" ]] || [[ -z "$response" ]]; then
                success "Deleted remote branch: $branch"
                ((deleted_count++))
            else
                error "Failed to delete remote branch: $branch"
            fi
        else
            success "Deleted remote branch: $branch"
            ((deleted_count++))
        fi
    done
    
    success "Deleted $deleted_count out of ${#branches[@]} remote branches in $repo_info"
}

process_repo() {
    local repo_path="$1"
    
    if ! is_git_repo "$repo_path"; then
        error "Not a git repository: $repo_path"
        return 1
    fi
    
    log "Processing repository: $repo_path"
    
    # Fetch latest info from remotes
    if git -C "$repo_path" remote >/dev/null 2>&1; then
        log "Fetching latest remote information..."
        git -C "$repo_path" fetch --all --prune >/dev/null 2>&1 || warn "Failed to fetch from remotes"
    fi
    
    # Get stale branches (local and remote)
    local stale_branches remote_stale_branches all_stale_branches
    mapfile -t stale_branches < <(get_stale_branches "$repo_path")
    mapfile -t remote_stale_branches < <(get_remote_stale_branches "$repo_path")
    
    # Combine local and remote stale branches
    all_stale_branches=("${stale_branches[@]}" "${remote_stale_branches[@]}")
    
    select_branches_to_delete "$repo_path" "${all_stale_branches[@]}"
}

main() {
    local config_file="$DEFAULT_CONFIG_FILE"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -d|--days)
                STALE_DAYS="$2"
                shift 2
                ;;
            -p|--check-prs)
                CHECK_PRS=true
                shift
                ;;
            -r|--remote)
                SCAN_REMOTE=true
                shift
                ;;
            -t|--token)
                GITHUB_TOKEN="$2"
                CHECK_PRS=true
                shift 2
                ;;
            -n|--dry-run)
                DRY_RUN=true
                shift
                ;;
            -e|--exclude)
                EXCLUDE_BRANCHES="$2"
                shift 2
                ;;
            -c|--config)
                config_file="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            -*)
                error "Unknown option: $1"
                show_help
                exit 1
                ;;
            *)
                REPOS+=("$1")
                shift
                ;;
        esac
    done
    
    # Load configuration file
    load_config "$config_file"
    
    # If no repos specified, use current directory
    if [[ ${#REPOS[@]} -eq 0 ]]; then
        REPOS=(".")
    fi
    
    # Check for required tools
    if [[ "$CHECK_PRS" == true ]] && ! command -v jq >/dev/null 2>&1; then
        error "jq is required for PR checking but not installed"
        exit 1
    fi
    
    if [[ "$CHECK_PRS" == true ]] && ! command -v curl >/dev/null 2>&1; then
        error "curl is required for PR checking but not installed"
        exit 1
    fi
    
    log "Git Branch Cleaner starting..."
    log "Stale threshold: $STALE_DAYS days"
    log "Check PRs: $CHECK_PRS"
    log "Scan remote: $SCAN_REMOTE"
    log "Dry run: $DRY_RUN"
    
    if [[ "$SCAN_REMOTE" == true ]] && [[ -z "$GITHUB_TOKEN" ]]; then
        error "GitHub token required for remote scanning. Use -t or set GITHUB_TOKEN."
        exit 1
    fi
    
    # Process each repository
    for repo in "${REPOS[@]}"; do
        process_repo "$repo"
        echo
    done
    
    log "Git Branch Cleaner finished"
}

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi